"use strict"

var path = require('path')
  , fs = require('fs-extra')
  ,	exec = require('child_process').exec;

var NORMAL_FILTERS = [];
var NORMAL_EXFILTERS = [/node_modules/i,/Gruntfile\.js$/i];


  // console.log(walk('./',[/\.js$/i]));

  // 遍历当前目录的文件
  function doWalk(uri, files,filters,ex_filters) {

    var stat = fs.lstatSync(uri);
    if (stat.isFile() && doMatch(uri,filters,ex_filters)) {

      var ext = path.extname(uri).replace(/^\./i,'');
      if(typeof files[ext] === 'undefined'){
        files[ext] = [];
      }
      files[ext].push(uri.split(path.sep).join('/'));
    }
    if (stat.isDirectory()) {
      fs.readdirSync(uri).forEach(function(part) {
        doWalk(path.join(uri, part), files,filters,ex_filters);
      });
    }
  }


  // 得到文件结构的数据结构
  // filters: [/rexg1/,/rexg2/]
  function walk(rootDir,filters,ex_filters) {
    var files = {
      /*
      css: [],
      less: [],
      scss: [],
      js: [],
      other: [] // 暂时没用
      */
    };
    doWalk(rootDir, files,filters,ex_filters);
    for(var i in files){
      files[i].forEach(function(v,k){
        files[i][k] = v.replace(rootDir+'/','');
      });
    }
    return files;
  }

  function doMatch(p, filters,ex_filters){
    if(!filters instanceof Array){
      return true;
    } 
    if(!ex_filters instanceof Array){
      ex_filters = [];
    } 
    var flag = true;
    filters.forEach(function(v,k){
      if(v.test && !v.test(p)){
        flag = false;
      }
    });
    ex_filters.forEach(function(v,k){
      if(v.test && v.test(p)){
        flag = false;
      }
    });
    return flag;
  }

  // 得到最大的版本号
  function getBiggestVersion(A){
    var a = [];
    var b = [];
    var t = [];
    var r = [];
    if(!A){
      return [0,0,0];
    }
    for(var i= 0;i< A.length;i++){
      if(A[i].match(/^\d+\.\d+\.\d+$/)){
        var sp = A[i].split('.');
        a.push([
          Number(sp[0]),Number(sp[1]),Number(sp[2])
        ]);
      }
    }
    
    var r = findMax(findMax(findMax(a,0),1),2);
    return r[0];
  }

  // a：二维数组，index，比较第几个
  // return：返回保留比较后的结果组成的二维数组
  function findMax(a,index){
    var t = [];
    var b = [];
    var r = [];
    for(var i = 0;i<a.length;i++){
      t.push(Number(a[i][index]));
    }
    var max = Math.max.apply(this,t);
    for(var i = 0;i<a.length;i++){
      if(a[i][index] === max){
        b.push(i);
      }
    }
    for(var i = 0;i<b.length;i++){
      r.push(a[b[i]]);
    }
    return r;
  }

// h5-test => test/
// pad-test => test/pad/
// test => test/
function awppDirName(proName){
	if(/^h5-([^\/]+)$/.test(proName)){
		return proName.match(/^h5-([^\/]+)$/)[1];
	} else if(/^pad-([^\/]+)$/.test(proName)){
		return proName.match(/^pad-([^\/]+)$/)[1] + '/pad';
	} else {
		return proName;
	}
}

function getBranchVersion(callback){
	exec('git branch', function (err, stdout, stderr, cb) {
		var reg = /\*\s+daily\/(\S+)/,
			match = stdout.match(reg);

		if (!match) {
			console.log('当前分支为 master 或者名字不合法(daily/x.y.z)，请切换到daily分支');
			console.log('创建新daily分支：grunt newbranch');
			console.log('只执行构建：grunt build');
			return;
		}
		/*
		grunt.log.write(('当前分支：' + match[1]).green);
		grunt.config.set('currentBranch', match[1]);
		*/
		callback(match[1]);
	});
}

//简单的模板替换
function sub(s, o) {
	return s.replace ? s.replace(/\{\s*([^|}]+?)\s*(?:\|([^}]*))?\s*\}/g, function (match, key) {
		return typeof o[key] === 'undefined' ? match : o[key];
	}) : s;
}

module.exports.sub = sub;
module.exports.awppDirName = awppDirName;
module.exports.fs = fs;
module.exports.walk = walk;
module.exports.findMax = findMax;
module.exports.getBiggestVersion = getBiggestVersion;
module.exports.getBranchVersion = getBranchVersion;
module.exports.NORMAL_FILTERS = NORMAL_FILTERS;
module.exports.NORMAL_EXFILTERS = NORMAL_EXFILTERS;


